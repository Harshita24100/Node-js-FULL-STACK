Project Structure
student-management/
│
├─ package.json
├─ server.js
├─ models/
│   └─ Student.js
├─ controllers/
│   └─ studentController.js
└─ routes/
    └─ studentRoutes.js

1. Install Dependencies
npm init -y
npm install express mongoose body-parser

2. Define the Student Model (models/Student.js)
const mongoose = require('mongoose');

const StudentSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Student name is required']
  },
  age: {
    type: Number,
    required: [true, 'Student age is required']
  },
  course: {
    type: String,
    required: [true, 'Student course is required']
  }
}, { timestamps: true });

module.exports = mongoose.model('Student', StudentSchema);

3. Create the Controller (controllers/studentController.js)
const Student = require('../models/Student');

// Create a new student
exports.createStudent = async (req, res) => {
  try {
    const student = new Student(req.body);
    await student.save();
    res.status(201).json(student);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Get all students
exports.getAllStudents = async (req, res) => {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Update a student by ID
exports.updateStudent = async (req, res) => {
  try {
    const student = await Student.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!student) return res.status(404).json({ error: 'Student not found' });
    res.json(student);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Delete a student by ID
exports.deleteStudent = async (req, res) => {
  try {
    const student = await Student.findByIdAndDelete(req.params.id);
    if (!student) return res.status(404).json({ error: 'Student not found' });
    res.json({ message: 'Student deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

4. Set Up Routes (routes/studentRoutes.js)
const express = require('express');
const router = express.Router();
const studentController = require('../controllers/studentController');

// Create
router.post('/', studentController.createStudent);

// Read
router.get('/', studentController.getAllStudents);

// Update
router.put('/:id', studentController.updateStudent);

// Delete
router.delete('/:id', studentController.deleteStudent);

module.exports = router;

5. Initialize Server (server.js)
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const studentRoutes = require('./routes/studentRoutes');

const app = express();
const PORT = 3000;

// Middleware
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://127.0.0.1:27017/studentDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/students', studentRoutes);

// Start server
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));

6. Expected Output

Add a new student

POST /students
Body: { "name": "Alice", "age": 22, "course": "Computer Science" }
Response: 201 Created
{
  "_id": "64f8abc1234",
  "name": "Alice",
  "age": 22,
  "course": "Computer Science",
  "createdAt": "...",
  "updatedAt": "...",
  "__v": 0
}


Get all students

GET /students
Response: 200 OK
[
  { "_id": "...", "name": "Alice", "age": 22, "course": "Computer Science", ... }
]


Update a student

PUT /students/:id
Body: { "age": 23 }
Response: 200 OK
{
  "_id": "...",
  "name": "Alice",
  "age": 23,
  "course": "Computer Science",
  ...
}


Delete a student

DELETE /students/:id
Response: 200 OK
{ "message": "Student deleted successfully" }
