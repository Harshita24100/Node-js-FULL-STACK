Architecture Overview
[ User Browser ]
        ‚Üì
[ AWS Route 53 (optional custom domain) ]
        ‚Üì
[ Application Load Balancer (ALB) ]
        ‚Üì
[ Multiple EC2 instances running Node.js backend ]
        ‚Üë
[ React frontend served from EC2 / S3 / CloudFront ]

‚öôÔ∏è Step 1: Build the Full Stack App
üñ•Ô∏è Frontend (React)

Create and build your React app:

npx create-react-app frontend
cd frontend
npm run build


This generates a production-ready /build folder.

‚öôÔ∏è Backend (Node.js + Express)

Example simple server:

server.js

const express = require('express');
const app = express();
const cors = require('cors');
const path = require('path');

app.use(cors());
app.use(express.json());

app.get('/api', (req, res) => {
  res.json({ message: "Hello from the backend!" });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

‚òÅÔ∏è Step 2: Launch EC2 Instances
üîπ Create Backend EC2 Instances

Go to AWS Management Console ‚Üí EC2 ‚Üí Launch Instance

Choose Amazon Linux 2 or Ubuntu 22.04

Instance type: t2.micro (Free Tier)

Configure:

Add HTTP (80) and custom port 5000 in Security Group

Launch 2 instances for backend

SSH into each instance:

ssh -i your-key.pem ec2-user@<instance-public-ip>


Install Node.js:

sudo apt update
sudo apt install -y nodejs npm


Clone your backend repo or upload files:

git clone <your-backend-repo>
cd backend
npm install
node server.js


Your backend should now run on each instance on port 5000.

üåê Step 3: Set Up Application Load Balancer (ALB)

Go to AWS Console ‚Üí EC2 ‚Üí Load Balancers ‚Üí Create Load Balancer

Choose Application Load Balancer

Set:

Scheme: Internet-facing

Listeners: HTTP (Port 80)

Create a Target Group:

Type: Instances

Protocol: HTTP

Port: 5000

Register both backend EC2 instances with the Target Group.

Create and attach the ALB to a VPC and Security Group (allow HTTP).

Once active, note the ALB DNS name (e.g., my-app-alb-123456.us-east-1.elb.amazonaws.com).

üñºÔ∏è Step 4: Deploy Frontend
Option 1: Serve React from EC2

Launch a new EC2 instance for frontend.

SSH in and install Nginx:

sudo apt update
sudo apt install nginx -y


Copy the frontend/build folder to /var/www/html:

sudo rm -rf /var/www/html/*
sudo cp -r build/* /var/www/html/
sudo systemctl restart nginx


In your React .env, set:

REACT_APP_API_URL=http://<ALB-DNS-NAME>/api


Rebuild and redeploy if needed.

Option 2: Serve React from S3 + CloudFront (recommended)

Upload the /build folder to an S3 bucket (public hosting).

Enable Static Website Hosting.

Add CloudFront for caching and HTTPS.

‚öôÔ∏è Step 5: Connect Everything

Now test from your browser:

http://<frontend-ec2-public-ip>   OR   http://<cloudfront-url>


Click a button or make a request that calls the backend ‚Äî you should see responses from the ALB, which distributes load between backend EC2s.

üß† (Optional) Step 6: Add Domain with Route 53

Buy or connect your domain in Route 53.

Create a Record Set (A Record) that points your domain to the ALB‚Äôs DNS name.

Wait a few minutes, and you‚Äôll have:

https://www.yourdomain.com ‚Üí ALB ‚Üí Backend EC2s
